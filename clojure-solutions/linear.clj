(defn operation [op] #(mapv op %1 %2))
(def v+ (operation +))
(def v- (operation -))
(def v* (operation *))
(def vd (operation /))
(def v*s #(mapv (fn [x] (* x %2)) %1))
(def scalar #(reduce + (mapv * %1 %2)))
(defn vect [[a1 a2 a3] [b1 b2 b3]] (vector (- (* a2 b3) (* a3 b2)) (- (* a3 b1) (* a1 b3)) (- (* a1 b2) (* a2 b1))))
(def m+ (operation v+))
(def m- (operation v-))
(def m* (operation v*))
(def md (operation vd))
(def m*s #(mapv (fn [x] (v*s x %2)) %1))
(def transpose #(apply mapv vector %))
(def m*v #(mapv (fn [x] (apply + (v* (nth %1 x) %2))) (range (count %1))))
(def m*m #(mapv (partial m*v (transpose %2)) %1))
(def c+ (operation m+))
(def c- (operation m-))
(def c* (operation m*))
(def cd (operation md))